
ButtonTest3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000052  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004a8  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043e  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c3  00000000  00000000  00000a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000be0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ac  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	0e c0       	rjmp	.+28     	; 0x4e <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:

#define F_CPU 1000000 UL

int main(void)
{
	DDRA = 0b00000000; //port A is in
  34:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0b11111111; //port B is out
  36:	8f ef       	ldi	r24, 0xFF	; 255
  38:	87 bb       	out	0x17, r24	; 23
	PORTA = 0b11111111; //high
  3a:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0b00000000; //Led off
  3c:	18 ba       	out	0x18, r1	; 24
    while (1) 
    {
		if (PINA & 1<<PINA0)
  3e:	c8 9b       	sbis	0x19, 0	; 25
  40:	03 c0       	rjmp	.+6      	; 0x48 <__SREG__+0x9>
		{
			PORTB = 0b00000001;
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	88 bb       	out	0x18, r24	; 24
  46:	fb cf       	rjmp	.-10     	; 0x3e <__SP_H__>
		}
		else
		{
			PORTB = 0b00000010;
  48:	82 e0       	ldi	r24, 0x02	; 2
  4a:	88 bb       	out	0x18, r24	; 24
  4c:	f8 cf       	rjmp	.-16     	; 0x3e <__SP_H__>

0000004e <_exit>:
  4e:	f8 94       	cli

00000050 <__stop_program>:
  50:	ff cf       	rjmp	.-2      	; 0x50 <__stop_program>
