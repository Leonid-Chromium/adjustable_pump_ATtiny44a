
ButtonTest2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000104  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000059a  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000501  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006e  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ee e7       	ldi	r30, 0x7E	; 126
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	02 d0       	rcall	.+4      	; 0x4a <main>
  46:	19 c0       	rjmp	.+50     	; 0x7a <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <main>:
	}
}*/

int main(void)
{
	DDRA |= (1<<LED1)|(1<<LED2)|(0<<BUTM)|(0<<BUTP);
  4a:	8a b3       	in	r24, 0x1a	; 26
  4c:	8c 60       	ori	r24, 0x0C	; 12
  4e:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1<<BUTP)|(1<<BUTM);
  50:	8b b3       	in	r24, 0x1b	; 27
  52:	83 60       	ori	r24, 0x03	; 3
  54:	8b bb       	out	0x1b, r24	; 27
	
	/////////////////INTERRUPTION///////////
	
	TIMSK1 |= (1<<TOIE1);//Разрешение на работу таймера.счётчика
  56:	8c b1       	in	r24, 0x0c	; 12
  58:	81 60       	ori	r24, 0x01	; 1
  5a:	8c b9       	out	0x0c, r24	; 12
	TCCR1B |= (0<<CS12)|(0<<CS11)|(1<<CS10); //Работа без прескейлера
  5c:	8e b5       	in	r24, 0x2e	; 46
  5e:	81 60       	ori	r24, 0x01	; 1
  60:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;//обнуляем таймер/счётчик
  62:	1d bc       	out	0x2d, r1	; 45
  64:	1c bc       	out	0x2c, r1	; 44
	
	sei();//Глобально разрешаем прерывания
  66:	78 94       	sei
	
	DDRB = 0;
  68:	17 ba       	out	0x17, r1	; 23
	
	
	while (1)
	{
		if (PINB==0)
  6a:	86 b3       	in	r24, 0x16	; 22
  6c:	81 11       	cpse	r24, r1
  6e:	03 c0       	rjmp	.+6      	; 0x76 <main+0x2c>
		{
			PORTA = 1<<LED1;
  70:	84 e0       	ldi	r24, 0x04	; 4
  72:	8b bb       	out	0x1b, r24	; 27
  74:	fa cf       	rjmp	.-12     	; 0x6a <main+0x20>
		}
		else
		{
			PORTA = 0<<LED1;
  76:	1b ba       	out	0x1b, r1	; 27
  78:	f8 cf       	rjmp	.-16     	; 0x6a <main+0x20>

0000007a <_exit>:
  7a:	f8 94       	cli

0000007c <__stop_program>:
  7c:	ff cf       	rjmp	.-2      	; 0x7c <__stop_program>
