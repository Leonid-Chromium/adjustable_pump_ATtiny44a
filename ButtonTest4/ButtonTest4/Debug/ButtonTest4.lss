
ButtonTest4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000538  00000000  00000000  000009f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000361  00000000  00000000  00000f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000325  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000142  00000000  00000000  00001631  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	22 c0       	rjmp	.+68     	; 0x48 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__bad_interrupt>
   a:	1e c0       	rjmp	.+60     	; 0x48 <__bad_interrupt>
   c:	1d c0       	rjmp	.+58     	; 0x48 <__bad_interrupt>
   e:	1c c0       	rjmp	.+56     	; 0x48 <__bad_interrupt>
  10:	1b c0       	rjmp	.+54     	; 0x48 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__bad_interrupt>
  14:	19 c0       	rjmp	.+50     	; 0x48 <__bad_interrupt>
  16:	18 c0       	rjmp	.+48     	; 0x48 <__bad_interrupt>
  18:	17 c0       	rjmp	.+46     	; 0x48 <__bad_interrupt>
  1a:	16 c0       	rjmp	.+44     	; 0x48 <__bad_interrupt>
  1c:	15 c0       	rjmp	.+42     	; 0x48 <__bad_interrupt>
  1e:	14 c0       	rjmp	.+40     	; 0x48 <__bad_interrupt>
  20:	13 c0       	rjmp	.+38     	; 0x48 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e2 e5       	ldi	r30, 0x52	; 82
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>
  44:	81 d0       	rcall	.+258    	; 0x148 <main>
  46:	83 c0       	rjmp	.+262    	; 0x14e <_exit>

00000048 <__bad_interrupt>:
  48:	db cf       	rjmp	.-74     	; 0x0 <__vectors>

0000004a <delay>:
#define BUTTS PINA2

int stime = 1000;

void delay(int ms){
	for(;ms;ms--)
  4a:	07 c0       	rjmp	.+14     	; 0x5a <delay+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4c:	e9 ef       	ldi	r30, 0xF9	; 249
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	31 97       	sbiw	r30, 0x01	; 1
  52:	f1 f7       	brne	.-4      	; 0x50 <delay+0x6>
  54:	00 c0       	rjmp	.+0      	; 0x56 <delay+0xc>
  56:	00 00       	nop
  58:	01 97       	sbiw	r24, 0x01	; 1
  5a:	00 97       	sbiw	r24, 0x00	; 0
  5c:	b9 f7       	brne	.-18     	; 0x4c <delay+0x2>
	_delay_ms(1);
}
  5e:	08 95       	ret

00000060 <warningBlink>:

void warningBlink(int ms)
{
	LED |= (1<<LED3);
  60:	28 b3       	in	r18, 0x18	; 24
  62:	24 60       	ori	r18, 0x04	; 4
  64:	28 bb       	out	0x18, r18	; 24
	delay(ms);
  66:	f1 df       	rcall	.-30     	; 0x4a <delay>
	LED |= (0<<LED3);
  68:	88 b3       	in	r24, 0x18	; 24
  6a:	88 bb       	out	0x18, r24	; 24
  6c:	08 95       	ret

0000006e <mybuttons>:
}

void mybuttons(void)
{
	if (BUTT & 1<<BUTTM)
  6e:	c9 9b       	sbis	0x19, 1	; 25
  70:	1f c0       	rjmp	.+62     	; 0xb0 <mybuttons+0x42>
	{
		if (stime>500)
  72:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  76:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  7a:	85 3f       	cpi	r24, 0xF5	; 245
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	92 07       	cpc	r25, r18
  80:	54 f0       	brlt	.+20     	; 0x96 <mybuttons+0x28>
		{
			stime-=100;
  82:	84 56       	subi	r24, 0x64	; 100
  84:	91 09       	sbc	r25, r1
  86:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			warningBlink(100);
  8e:	84 e6       	ldi	r24, 0x64	; 100
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	e6 df       	rcall	.-52     	; 0x60 <warningBlink>
  94:	10 c0       	rjmp	.+32     	; 0xb6 <mybuttons+0x48>
		}
		else
		{
			warningBlink(100);
  96:	84 e6       	ldi	r24, 0x64	; 100
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	e2 df       	rcall	.-60     	; 0x60 <warningBlink>
  9c:	83 ed       	ldi	r24, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <mybuttons+0x32>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <mybuttons+0x38>
  a6:	00 00       	nop
			_delay_ms(50);
			warningBlink(100);
  a8:	84 e6       	ldi	r24, 0x64	; 100
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	d9 df       	rcall	.-78     	; 0x60 <warningBlink>
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <mybuttons+0x48>
		}
	}
	else
	{
		warningBlink(100);
  b0:	84 e6       	ldi	r24, 0x64	; 100
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	d5 df       	rcall	.-86     	; 0x60 <warningBlink>
	}
	if (BUTT & 1<<BUTTP)
  b6:	c8 9b       	sbis	0x19, 0	; 25
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <mybuttons+0x8a>
	{
		if (stime<3000)
  ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c2:	88 3b       	cpi	r24, 0xB8	; 184
  c4:	2b e0       	ldi	r18, 0x0B	; 11
  c6:	92 07       	cpc	r25, r18
  c8:	54 f4       	brge	.+20     	; 0xde <mybuttons+0x70>
		{
			stime+=100;
  ca:	8c 59       	subi	r24, 0x9C	; 156
  cc:	9f 4f       	sbci	r25, 0xFF	; 255
  ce:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			warningBlink(100);
  d6:	84 e6       	ldi	r24, 0x64	; 100
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	c2 df       	rcall	.-124    	; 0x60 <warningBlink>
  dc:	08 95       	ret
		}
		else
		{
			warningBlink(100);
  de:	84 e6       	ldi	r24, 0x64	; 100
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	be df       	rcall	.-132    	; 0x60 <warningBlink>
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <mybuttons+0x7a>
  ec:	00 c0       	rjmp	.+0      	; 0xee <mybuttons+0x80>
  ee:	00 00       	nop
			_delay_ms(50);
			warningBlink(100);
  f0:	84 e6       	ldi	r24, 0x64	; 100
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	b5 df       	rcall	.-150    	; 0x60 <warningBlink>
  f6:	08 95       	ret
		}
	}
	else
	{
		warningBlink(100);
  f8:	84 e6       	ldi	r24, 0x64	; 100
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	b1 df       	rcall	.-158    	; 0x60 <warningBlink>
  fe:	08 95       	ret

00000100 <blink>:
	}
}

void blink()
{
 100:	cf 93       	push	r28
	LED ^= 3;//(1<<LED1)|(1<<LED2);
 102:	88 b3       	in	r24, 0x18	; 24
 104:	c3 e0       	ldi	r28, 0x03	; 3
 106:	8c 27       	eor	r24, r28
 108:	88 bb       	out	0x18, r24	; 24
	delay(stime);
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 112:	9b df       	rcall	.-202    	; 0x4a <delay>
	mybuttons();
 114:	ac df       	rcall	.-168    	; 0x6e <mybuttons>
	LED ^= 3;//(1<<LED1)|(1<<LED2);
 116:	88 b3       	in	r24, 0x18	; 24
 118:	c8 27       	eor	r28, r24
 11a:	c8 bb       	out	0x18, r28	; 24
	delay(stime);
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	92 df       	rcall	.-220    	; 0x4a <delay>
	mybuttons();
 126:	a3 df       	rcall	.-186    	; 0x6e <mybuttons>
}
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <init>:

void init(void)
{
	DDRA = 0b00000000; //port A is in
 12c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0b11111111; //port B is out
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	87 bb       	out	0x17, r24	; 23
	PORTA = 0b11111111; //high
 132:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0b00000000; //LED1 is on, LED2 is off
 134:	18 ba       	out	0x18, r1	; 24
	while (BUTT & 1<<BUTTS)
 136:	ca 99       	sbic	0x19, 2	; 25
 138:	fe cf       	rjmp	.-4      	; 0x136 <init+0xa>
	{
	}
	warningBlink(1000);
 13a:	88 ee       	ldi	r24, 0xE8	; 232
 13c:	93 e0       	ldi	r25, 0x03	; 3
 13e:	90 df       	rcall	.-224    	; 0x60 <warningBlink>
	LED |= 1<<LED1;
 140:	88 b3       	in	r24, 0x18	; 24
 142:	81 60       	ori	r24, 0x01	; 1
 144:	88 bb       	out	0x18, r24	; 24
 146:	08 95       	ret

00000148 <main>:
}

int main(void)
{
	init();
 148:	f1 df       	rcall	.-30     	; 0x12c <init>
    while (1) 
    {
		blink();
 14a:	da df       	rcall	.-76     	; 0x100 <blink>
 14c:	fe cf       	rjmp	.-4      	; 0x14a <main+0x2>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
